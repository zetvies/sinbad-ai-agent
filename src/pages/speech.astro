---
import ChevronDown from "../assets/tabler-icons/chevron-down.astro";
import GenderMale from "../assets/tabler-icons/gender-male.astro";
import Mail from "../assets/tabler-icons/mail.astro";
import Microphone from "../assets/tabler-icons/microphone.astro";
import Phone from "../assets/tabler-icons/phone.astro";
import PlayerRecord from "../assets/tabler-icons/player-record.astro";
import Reload from "../assets/tabler-icons/reload.astro";
import Send from "../assets/tabler-icons/send.astro";
import User from "../assets/tabler-icons/user.astro";
import World from "../assets/tabler-icons/world.astro";
import AIMicrophone from "../components/AIMicrophone.astro";
import VerificationForm from "../components/form/VerificationForm.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Speech">
  <div class="w-full h-[35svh] bg-cream flex justify-center relative">
    <video id="AhmedAnimation" class="w-full h-full">
      <source src="/headtilt.mp4" type="video/mp4" />
      Your browser does not support the video tag.
    </video>
    <div
      id="AIDialogContainer"
      class={`max-w-[60%] opacity-0 transition-opacity duration-100 absolute bottom-4 left-auto right-auto z-[100] bg-white py-2 px-4 rounded-lg montserrat`}
    >
      <svg
        class="absolute bottom-[85%]"
        width="32"
        height="21"
        viewBox="0 0 32 21"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M25.8423 4.44478L11.5015 13.6319C8.13714 15.7871 9.6637 21 13.6592 21H28C30.2091 21 32 19.2091 32 17V7.81291C32 4.6511 28.5046 2.73921 25.8423 4.44478Z"
          fill="white"></path>
      </svg>
      <div id="AIDialogText"></div>
    </div>
  </div>
  <div class="ibm-plex-mono-medium my-3">Provide Personal Details</div>
  <div class="flex flex-col space-y-3 w-[80%]">
    <button
      id="selectNationalityButton"
      class="w-full h-14 text-left px-4 border rounded-lg text-[.9em] flex items-center justify-between"
    >
      <div class="flex space-x-2">
        <World />
        <div id="nationalityText">Nationality</div>
      </div>
      <ChevronDown />
    </button>
    <div
      class="w-full h-14 text-left px-4 border rounded-lg text-[.9em] flex items-center space-x-2"
    >
      <User />
      <input
        type="text"
        id="nameText"
        class="formInput w-full h-full rounded-lg focus:outline-none"
        placeholder="Name"
      />
    </div>
    <div
      class="w-full h-14 text-left px-4 border rounded-lg text-[.9em] flex items-center space-x-2"
    >
      <Mail />
      <input
        type="text"
        id="emailText"
        class="formInput w-full h-full rounded-lg focus:outline-none"
        placeholder="Email"
      />
    </div>
    <div
      class="w-full h-14 text-left px-4 border rounded-lg text-[.9em] flex items-center space-x-2"
    >
      <Phone />
      <input
        type="text"
        id="mobileNumberText"
        class="formInput w-full h-full rounded-lg focus:outline-none"
        placeholder="Mobile Number"
      />
    </div>
    <button
      id="selectGenderButton"
      class="w-full h-14 text-left px-4 border rounded-lg text-[.9em] flex items-center justify-between"
    >
      <div class="flex space-x-2">
        <GenderMale />
        <div id="genderText">Gender</div>
      </div>
      <ChevronDown />
    </button>
  </div>
  <div
    id="microphoneModal"
    class="hidden h-[65svh] w-full absolute bottom-0 left-0 z-[100]"
  >
    <button
      id="microphoneCloseButton"
      class="h-full w-full absolute top-0 left-0 bg-[rgb(255,255,255,.6)]"
    >
    </button>
    <div
      id="results"
      class="absolute bottom-16 w-[80%] z-5 bg-white border p-3 pb-20 pr-16 m-4 rounded-lg text-[.9em] ibm-plex-mono-regular z-[5]"
    >
    </div>
  </div>
  <button
    onclick="toggleRecording()"
    id="microphoneButton"
    class={`absolute bottom-24 right-10 z-[200] bg-white border-2 border-dark-green rounded-full p-3`}
  >
    <Microphone className="stroke-dark-green h-full w-full" />
  </button>
  <button
    onclick="toggleRecording()"
    id="microphoneRecordButton"
    class="hidden absolute bottom-24 right-10 z-[200] bg-grey border-2 border-transparent rounded-full p-3"
  >
    <PlayerRecord className="fill-red-500 h-full w-full" />
  </button>

  <div
    id="microphonePlayReloadContainer"
    class="hidden space-x-2 absolute bottom-24 right-10 z-[200]"
  >
    <button
      onclick="toggleRecording(true)"
      id="microphoneReloadButton"
      class="bg-grey border-2 border-transparent rounded-full p-3"
    >
      <Reload className=" h-full w-full" />
    </button>
    <button
      onclick="dataExtraction()"
      id="microphoneSendButton"
      class="bg-grey border-2 border-transparent rounded-full p-3"
    >
      <Send className="h-full w-full" />
    </button>
  </div>
  <script is:inline>
    let vid = document.getElementById("AhmedAnimation");

    function playVid() {
      vid.innerHTML = null;
      var source = document.createElement("source");

      source.setAttribute("src", "/thumbsup.mp4");
      source.setAttribute("type", "video/mp4");

      vid.appendChild(source);
      vid.load();
      vid.play();
      document.getElementById("AIDialogContainer").style.opacity = 1;
      document.getElementById("AIDialogText").innerText =
        "Thank you for submitting!";
      setTimeout(() => {
        document.getElementById("AIDialogContainer").style.opacity = 0;
        document.getElementById("AIDialogText").innerText = "";
      }, 2500);
    }

    function playCasual() {
      if (vid.currentSrc !== "/headtilt.mp4") {
        vid.innerHTML = null;
        var source = document.createElement("source");

        source.setAttribute("src", "/headtilt.mp4");
        source.setAttribute("type", "video/mp4");

        vid.appendChild(source);
        vid.load();
      }
      vid.play();
      document.getElementById("AIDialogContainer").style.opacity = 1;
      document.getElementById("AIDialogText").innerText =
        "Tell me your name, nationality, email, mobile number and gender.";
      setTimeout(() => {
        document.getElementById("AIDialogContainer").style.opacity = 0;
        document.getElementById("AIDialogText").innerText = "";
      }, 20000);
    }
  </script>
  <!-- <h1>Web Speech API</h1>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <p hidden class="support">Web Speech API not supported</p> -->
</Layout>
<script is:inline>
  window.SpeechRecognition =
    window.SpeechRecognition || window.webkitSpeechRecognition;

  let recognition = new window.SpeechRecognition();
  let recording = false;
  let results = null;

  recognition.continuous = true;
  recognition.lang = "id";
  recognition.interimResults = true;

  async function dataExtraction() {
    let resultsDiv = document.getElementById("results");
    const text = resultsDiv.innerText;
    const response = await fetch("https://ahmed.services.sindbadhq.com/agent", {
      method: "post",
      headers: new Headers({
        Authorization:
          "ya29.bwLu0ruxXdXe_RMOSYgfiCPORNMHLkf9rCDmV1rKtWu90TuF1d8B2SmdUlrjeOWNYThkgMM",
        "Content-Type": "application/json",
      }),
      body: JSON.stringify({
        input_text: text,
        schema: "PersonalDetails",
      }),
    });
    const data = await response.json();
    console.log(data);
    if (data) {
      playVid();

      document.getElementById("emailText").value = data.email
        ? data.email
        : document.getElementById("emailText").value;
      document.getElementById("nameText").value = data.name
        ? data.name
        : document.getElementById("nameText").value;
      document.getElementById("mobileNumberText").value = data.mobile_number
        ? data.mobile_number
        : document.getElementById("mobileNumberText").value;
      document.getElementById("nationalityText").innerText = data.nationality
        ? data.nationality
        : "Nationality";
      document.getElementById("genderText").innerText = data.gender
        ? data.gender
        : "Gender";
    }
    return data;
  }

  function toggleRecording(reload) {
    if (recording) {
      recognition.onend = null;
      recognition.stop();
      recording = false;
    } else {
      playCasual();
      let resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = null;
      recognition.onend = onEnd;
      recognition.start();
      recording = true;
    }
  }

  function onEnd() {
    console.log("Speech recognition has stopped. Starting again ...");
    recognition.start();
  }

  function onSpeak(e) {
    results = e.results;
    if (results) {
      let resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = null;
      for (let i = 0; i < results.length; ++i) {
        resultsDiv.innerHTML =
          resultsDiv.innerHTML + results.item(i)[0].transcript;
      }
      console.log(e.results[e.results.length - 1][0].transcript);
    }
  }

  recognition.addEventListener("result", onSpeak);

  const microphoneButton = document.getElementById("microphoneButton");
  const microphoneModal = document.getElementById("microphoneModal");
  const microphoneRecordButton = document.getElementById(
    "microphoneRecordButton"
  );
  const microphonePlayReloadContainer = document.getElementById(
    "microphonePlayReloadContainer"
  );
  const microphoneReloadButton = document.getElementById(
    "microphoneReloadButton"
  );
  const microphoneSendButton = document.getElementById("microphoneSendButton");
  const microphoneCloseButton = document.getElementById(
    "microphoneCloseButton"
  );

  microphoneButton.addEventListener("click", () => {
    microphoneModal.style.display = "flex";
    microphoneRecordButton.style.display = "flex";
    microphoneButton.style.display = "none";
  });
  microphoneCloseButton.addEventListener("click", () => {
    microphoneModal.style.display = "none";
    microphoneRecordButton.style.display = "none";
    microphonePlayReloadContainer.style.display = "none";
    microphoneButton.style.display = "flex";
  });

  microphoneRecordButton.addEventListener("click", () => {
    microphoneRecordButton.style.display = "none";
    microphonePlayReloadContainer.style.display = "flex";
  });
  microphoneSendButton.addEventListener("click", () => {
    microphoneModal.style.display = "none";
    microphonePlayReloadContainer.style.display = "none";
    microphoneButton.style.display = "flex";
  });
  microphoneReloadButton.addEventListener("click", () => {
    microphonePlayReloadContainer.style.display = "none";
    microphoneRecordButton.style.display = "flex";
  });
</script>
